#!/usr/bin/python

# Copyright 2017 Garry Du

import argparse
import generator
import output
from press_any_key import press_any_key_to_continue


def convert_on_off_to_bool(input_string):
    if input_string.upper() == "ON":
        return True
    else:
        return False


def dispatch(time_length,
             same_denominator,
             digits,
             mixed_numbers,
             operator,
             problem_num,
             email_addr
             ):
    ###### input validation ########
    if not (0 < time_length <= 1000):
        print "Expect time within 1 to 1000 minutes. Set time to 10 min."
        press_any_key_to_continue()
        time_length = 10
    if not (0 < digits <= 2):
        print "Digits of a number is either 1 or 2. Set to 1."
        press_any_key_to_continue()
        digits = 1
    operator_in_number = 1  # 1 is add
    #  print operator
    if (operator == "s"):
        operator_in_number = 2  # 2 is sub
    elif (operator == "m"):
        operator_in_number = 3  # 3 is mul
    elif (operator == "d"):
        operator_in_number = 4  # 4 is div
    if not (0 < problem_num <= 200):
        print "We usually give at least one problem or no more than 200... Set to 10."
        press_any_key_to_continue()
        problem_num = 10
    same_denominator = convert_on_off_to_bool(same_denominator)
    mixed_numbers = convert_on_off_to_bool(mixed_numbers)
    ##### Generate problems. #####
    problem_list, answer_list = generator.two_fraction_operation(
        mixed_numbers, digits, same_denominator, operator_in_number, problem_num)
    print "Mixed numbers:", mixed_numbers, "Time length:", time_length, \
        "Same Denominator:", same_denominator, "number of digits:", digits, \
        "Operator:", operator, "number of problems:", problem_num, \
        "Email addr:", email_addr
    # problem and answer should be lists of strings
    #problem_list = ["   1   \n ----\n   3   "]
    #answer_list = ["  3       4 \n --- + --- = 0\n  4     5 "]
    ##### Output answer and problems #####
    output.output(problem_list, answer_list, time_length,
                  email_addr, send_html=True)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--time-length',
                        default=10,
                        type=int,
                        help='How many minutes to finish the problem set. After that an email reminder will be sent. Default is 10 minutes.')
    parser.add_argument('--same-denominator',
                        default="off",
                        type=str,
                        help='If the two fractions share the same denominator. On or off. Default is off.')
    parser.add_argument('--digits',
                        default=1,
                        type=int,
                        help='How many digits the numerators and denominators have. Default is 1.')
    parser.add_argument('--mixed-numbers',
                        type=str,
                        default="on",
                        help="Using mixed numbers instead of improper fractions. On or off. Default is on.")
    parser.add_argument('--operator',
                        type=str,
                        default='a',
                        help="The operator in the middle. Can be a, s, m, and d.")
    parser.add_argument('--problem-num',
                        type=int,
                        default=10,
                        help='The number of problems to generate.')
    parser.add_argument('--email-addr',
                        type=str,
                        default="gdu@gmx.us",
                        help='The Email address to receive ansers and reminders.')
    parse_args, unknown = parser.parse_known_args()

    dispatch(**parse_args.__dict__)
